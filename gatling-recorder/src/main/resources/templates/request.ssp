<%@ val headersId: Option[Int] %>
<%@ val method: String %>
<%@ val printedUrl: String %>
<%@ val queryParams: List[(String, String)] %>
<%@ val requestBodyOrParams: Option[Either[String, List[(String, String)]]] %>
<%@ val statusCode: Int %>
<%@ val id: Int %>
<%@ val credentials: Option[(String,String)] %>
<%@ val simulationClass: String %>
exec(http("request_<%= id %>")
					.<%= method.toLowerCase %>("<%= printedUrl %>")
<% headersId.map { headersId => %>
					.headers(headers_<%= headersId %>)
<% } %>
<% for (queryParam <- queryParams) { %>
					.queryParam("""<%= queryParam._1 %>""", """<%= queryParam._2 %>""")
<% } %>
<% requestBodyOrParams.map { _ match {
		case Left(_) => %>
						.fileBody("<%= simulationClass %>_request_<%= id %>.txt")
<%		case Right(params) => params.foreach { case(key, value) => %>
						.param("""<%= key %>""", """<%= value %>""")
<% 				} %>
<% 		} %>
<% } %>
<% credentials.map { case (username, password) => %>
					.basicAuth("""<%= username %>""","""<%= password %>""")
<% } %>
<% if(statusCode > 210 || statusCode < 200){ %>
					.check(status.is(<%= statusCode %>))
<% } %>
			)